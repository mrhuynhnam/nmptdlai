import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('dulieuxettuyendaihoc.csv',
                 header=0,delimiter=','
                 ,encoding='utf-8')

df

#Phần 1: Xử lý dữ liệu cơ bản

df.info()
df.rename(columns={'NGAYTHI':'NT',
                   'KETQUA':'KQ','M1':'T'
                   ,'M2':'L'
                   ,'M3':'H'}, 
                   inplace=True)
df.head(5)

df.dropna(how='all', inplace=True)
df.drop_duplicates(inplace=True)

# Dùng heatmap để trực quan hóa dữ liệu thiếu
plt.figure(figsize=(10,6))
sns.heatmap(df.isna().transpose(),cmap='YlGnBu',
            cbar_kws={'label':'Dữ liệu thiếu'})
plt.savefig('missingdata.png', dpi=100)
plt.show()

df['T'].fillna(0, inplace=True)
df['L'].fillna(df['L'].mean(), inplace=True)
df['H'].fillna(df['H'].median(), inplace=True)

# Phần 2: Kỹ thuật Feature Engineering

df['TB'] = (df['T']+df['L']+df['H'])/3

df.loc[df['TB'] < 5.0, 'XL'] = 'FAIL'

df.loc[(df['TB'] >= 5.0) & 
       (df['TB'] < 7.0), 'XL'] = 'FAIR'

df.loc[(df['TB'] >= 7.0) & 
       (df['TB'] < 9.0), 'XL'] = 'GOOD'

df.loc[df['TB'] >= 9.0, 'XL'] = 'EXCEL'

dict_map = {
    'A1':'G1', 'C':'G3', 'D1': 'G3', 'A': 'G1', 'B': 'G2'
}
df['NHOM'] = df['KT'].map(dict_map)

def fplus(x,y):
    if (x == 'G1' or x == 'G2') and (y >= 4.0):
        return 1.0
    else:
        return 0.0

df['DC'] = list(map(fplus,df['NHOM'],df['TB']))

df

# Sinh viên tự làm tạo cột MaxM = giá trị lớn nhất của (M1,M2,M3)

# Phần 3: Trực quan hóa dữ liệu

sns.countplot(x='GT', data=df)
plt.show()

'''
Sinh viên tự làm tương tự cho các cột DT
--> Dựa trên biểu đồ DT cho biết tại sao 
    ta không phân tích theo phân nhóm DT

Sinh viên tự làm tương tự cho các cột NHOM
--> Dựa trên biểu đồ NHOM 
    hãy cho biết nhóm nào có lượng thí sinh đông nhất 
    và thấp nhất
'''

sns.countplot(x='KT', hue='GT',data=df)
plt.show()

'''
Sinh viên tự làm tương tự cho các nhóm 
biến định tính: (KV,KT)
-->Hãy cho biết khối A có sinh viên khu vực nào đăng ký nhiều nhất
'''

sns.barplot(x='GT', y='T', data=df, errorbar=None)
plt.show()

'''
Hãy so sánh trung bình điểm T theo NHOM
-> Cho biết nhóm thi nào có điểm thi T cao nhất
'''

sns.barplot(x='KT', y='T', hue='GT', data=df, errorbar=None)
plt.show()

sns.barplot(x='GT', y='T', hue='KT', data=df)
plt.show()

sns.barplot(x='GT', y='T', hue='KT', data=df, 
            errorbar=None, estimator=np.max)
plt.show()

gb = df.groupby(['KT'])['KT'].agg(['count'])

print(gb)

labels = gb.index # labels = ['A','A1','B','C','D1']
data = list(gb['count']) # data= [49,6,9,14,22]

colors = sns.color_palette('pastel') # Tạo bảng màu

plt.pie(data, labels=labels, colors=colors, 
        autopct='%1.1f%%', shadow=True)

plt.show()

'''
Sinh viên tự viết thống kê tỉ lệ phần trăm cho KV
'''

'''
Trực quan tỉ lệ phần trăm tổng điểm DC 
trên từng nhóm KV
'''

sns.lineplot(x='NT', y='T', data=df)
plt.show()

sns.lineplot(x='NT', y='T', data=df, estimator=np.max)
plt.show()

# Phần 4: Phân tích mô tả định lượng - THỐNG KÊ MÔ TẢ

print(f'{df["T"].min()}\n{df["T"].max()}\n')
print(f'{df["T"].mean()}\n{df["T"].median()}\n')
print(f'{df["KT"].mode()}\n')
print(f'{df["T"].quantile(0.25)}\n')

# Hãy tính phân vị thứ 9 trong thập phân vị (gọi là p9) cho T và L.

range = df['T'].max() - df['T'].min()

df[['T','L']].max() - df[['T','L']].min()

iqr= df['T'].quantile(0.75) - df['T'].quantile(0.25)

deltaD = np.mean(np.abs(df['T'] - np.mean(df['T'])))

# Bài tập
# Hãy tính khoảng range cho T và L
# Hãy tính độ lớn khoảng IQR cho T và L
# Hãy tính độ lớn khoảng dao động của L (gợi ý: |range|)
# Hãy tính độ lớn của IQR của L là bao nhiêu (gợi ý: |IQR|)
# Hãy tính khoảng giá trị IQR của L (gợi ý: [Q1;Q3])
# Hãy tính độ lệch trung bình cho T và L

df['T'].var()

df['T'].std()

df['T'].describe()
df[['T','L','H']].describe()

cv = df[['T','L','H']].std() / df[['T','L','H']].mean()
list(cv)

# Bài tập: Sinh viên viết code để tìm ra giá trị cv lớn nhất và nhỏ nhất của T,L,H
# Hãy sắp xếp tăng dần danh sách các giá trị cv

# Phân tích đơn biến định lượng (univariate analysis)
df.groupby('GT')['T'].describe()
df.groupby('GT')['T'].std()/df.groupby('GT')['T'].mean()
# Câu hỏi: Đánh giá xem nhóm giới tính nào thi T tốt hơn
# Câu hỏi: Sinh viên có giới tính nam thì thi môn nào tốt hơn so với nữ
# Lưu ý: Chỉ dùng 2 dòng code để thể hiện kết quả

# Trực quan dữ liệu phân tích univariate analysis

df['T'].hist()
plt.show()

df['T'].hist(bins=14)
plt.show()

sns.displot(df, x='T', kind='kde')
plt.show()

sns.displot(data = df[['T','L','H']], kind='kde')
plt.show()
# Hãy cho biết phân phối của biến số nào gần giống với phân phối chuẩn hơn

sns.displot(df, x='M1', hue='GT', kind='kde')
plt.show()
# Câu hỏi: Nhóm giới tính nào có phân phối điểm gần phân phối chuẩn

df['T'].skew()

df[['T','L','H']].skew()

df[['T']].kurtosis()
# Câu hỏi: biến T có độ nhọn như thế nào

df[['T','L','H']].kurtosis()
# Hãy cho biết dạng phân phối nào là thin, fat và fit

sns.displot(data = df[['T','L']], kind='kde')
plt.show()
'''
Câu hỏi: Nhìn biểu đồ hãy cho biết ý nghĩa của kutorsis của T,L
'''

from scipy import stats
stats.probplot(df['T'],plot=sns.mpl.pyplot)
plt.show()
# Hãy cho biết phân phối T có gần như phân phối chuẩn hay không

sns.boxplot(data=df['L'], orient="h")
plt.show()
# Với điểm L
# Hãy tính khoảng giá trị nghi ngờ bất thường
# Hãy tính khoảng giá trị được cho là bất thường
# Hãy tính xem có bao nhiêu sinh viên có điểm thi là bất thường

sns.boxplot(data=df[['T','L','H']], orient='h')
plt.show()
# Câu hỏi: Hãy cho biết điểm số môn nào không xảy ra bất thường

sns.boxplot(x='L', y='KT',data=df, orient='h')
plt.show()
# Câu hỏi: Khối thi nào có lower bound trùng với tứ phân vị thứ 1 (tức là Q1)

sns.boxplot(x='GT',y='H',data=df)
plt.show()
# 1. H trên giới tính nào có bất thường
# 2. Có dễ dàng dự báo H theo yếu tố giới tính (GT) hay không?

sns.boxplot(x='KT', y='H',hue='GT',data=df)
plt.show()
# Câu hỏi: Xác định các biểu đồ có dữ liệu bất thường 

# Phân tích đa biến định lượng (multivariate analysis)
df[['T','L']].cov()

# Bài tập: Xây dựng ma trận phương sai T,L,H.
# So sánh sự tương quan (ảnh hưởng, tác động, liên hệ) giữa 
# T so với H 
# L so với H

df[['T','L']].corr()

sns.lmplot(data=df, x='M1', y='M2', fit_reg=True)
plt.show()

# Câu hỏi: Vẽ biểu đồ khám phá tương quan tuyến tính giữa T và L

df[['T','L','H']].corr()
# Câu hỏi: Hãy viết code sắp xếp tăng dần mức độ tác động (tương quan tuyến tính) của L, H đến T
# Câu hỏi: Hãy viết code tìm cặp tương quan tuyến tính cao nhất

sns.heatmap(df[['T','L','H']].corr(), vmax=1.0, square=False).xaxis.tick_top()

sns.lmplot(data=df, x='T', y='L',hue='GT', fit_reg=True)
plt.show()
# Câu hỏi: Tương quan tuyến tính (T, L) của nhóm giới tính nào cao hơn

sns.pairplot(df[['T','L','H']],diag_kind='kde', kind='reg')
plt.show()
